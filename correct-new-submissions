#!/usr/bin/env bash
set -euo pipefail

displayUsage() {
    echo '
usage:  correct-new-submissions [...]
operations:
    {-h help}    shows this dialogue
    {-n number}  number of times to run the correction
    {-d daemon}  keep running until process is closed
    {-w wait}    wait time before next iteration in minutes
    {-t time}    time to run as daemon. Given as HH:MM:SS
    {-f failed}  correct failed assignment
    {-v verbose} verbosity
    {-a all}     correct all assignments'
}

n=1
t=0
w=0
daemon=false
args=''
download_args='p'
max_time=0
while getopts ":hn:dw:vast:" opt; do
    case ${opt} in
	a)
	    grade_all=true
	    args+='a'
	    ;;
	d)
	    daemon=true
	    ;;
	f)
	    download_args='f'
	    ;;
	h)
	    displayUsage
	    exit 0
	    ;;
	n)
	    n="$OPTARG"
	    ;;
	s)
	    skip_check="skip"
	    ;;
	t)
	    max_time=$(echo "$OPTARG" | awk -F: '{ print ($1 * 3600) + ($2 * 60) + $3 }')
	    ;;
	v)
	    verbose=true
	    args+='v'
	    download_args+='v'
	    ;;
	w)
	    w=$OPTARG
	    ;;
	\?)
	    echo "Invalid option: $OPTARG" 1>&2
	    exit 2
	    ;;
	:)
	    echo "Invalid option: $OPTARG requires an argument" 1>&2
	    exit 2
	    ;;
    esac
done
shift $((OPTIND - 1))

# check requirements
if [ -z skip_check ]
then
    echo "Checking requirements"
    bash check_requirements || exit 1
fi

# check for network
if ! wget -q --spider http://google.com
then
    echo "No connection to the internet"
    exit 1
fi


[ ! -z "$args"] && args+="-$args"
[ ! -z "$download_args" ] && download_args="-$download_args"

function routine {
    echo "
    ################################################################################
    #                           deleting old submissions                           #
    ################################################################################"
    bash delete_submissions.sh
    echo "Done deleting old submissions!"

    echo "
    ################################################################################
    #                           Downloading submissions                            #
    ################################################################################
    "
    if [ ! -z "$download_args" ]; then
	python3 download_submissions.py "$download_args"
    else
	python3 download_submissions.py
    fi
    echo "Done downloading submissions"

    echo "
    ################################################################################
    #                             process submissions                              #
    ################################################################################"
    bash process_submissions.sh
    echo "Done correcting submissions!"

    echo "
    ################################################################################
    #                              uploading comments                              #
    ################################################################################"
    python upload_comments.py -v
    echo "Done uploading comments!"

    echo "
    ################################################################################
    #                               updating grades                                #
    ################################################################################"
    python grade_submissions.py -v
    echo "Done updating grades!"

    echo "
    ################################################################################
    #                               plotting results                               #
    ################################################################################"
    python plot_scores.py
    echo "Done plotting"
}


convert-secs() {
    ((h=${1}/3600))
    ((m=(${1}%3600)/60))
    ((s=${1}%60))
    printf "%02d:%02d:%02d\n" $h $m $s
}


SECONDS=0
while true; do

    time routine

    if [ "$n" -gt "0" ]; then
	n=$((n - 1))
    fi
    if [ "$n" -gt "0" ] || $daemon; then
	echo "
	################################################################################
	#                                   waiting                                    #
	################################################################################"
	! $daemon && date && echo "Runs left: $n" || date && echo "Running as daemon"
	while :; do for s in / - \\ \|; do
			printf "\r$s"
			sleep 0.2
		    done; done &
	sleep "$w"m
	kill $!
	trap 'kill $!' SIGTERM

	run_time=$(convert-secs $SECONDS)
	echo "Daemon has been running in: $run_time"
    fi
    if [ "$n" = "0" ] && [ "$daemon" = "false" ];
    then
	break
    elif [ "$SECONDS" -gt "$max_time" ] && [ "$max_time" -ne "0" ] && [ "$daemon" = "true" ];
    then
	break
    fi
done

echo "Autorun: Done!"
